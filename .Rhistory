main_model_logBF_curve <-  main_model_logBF_curve %>%
mutate(log10BF = log10(exp(BF.log_BF)))
log10BF_loess <- loess(log10BF ~ effect,
data = main_model_logBF_curve)
main_model_logBF_curve <- main_model_logBF_curve %>%
mutate(log10BF_pred <- predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
))
main_model_logBF_curve <-  main_model_logBF_curve %>%
mutate(log10BF = log10(exp(BF.log_BF)))
log10BF_loess <- loess(log10BF ~ effect,
data = main_model_logBF_curve)
main_model_logBF_curve <- main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
))
View(main_model_logBF_curve)
main_model_logBF_curve <-  main_model_logBF_curve %>%
mutate(log10BF = log10(exp(BF.log_BF)))
log10BF_loess <- loess(log10BF ~ effect,
data = main_model_logBF_curve)
main_model_logBF_curve <- main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = diff(log10BF_pred))
diff(main_model_logBF_curve$log10BF_pred)
main_model_logBF_curve <-  main_model_logBF_curve %>%
mutate(log10BF = log10(exp(BF.log_BF)))
log10BF_loess <- loess(log10BF ~ effect,
data = main_model_logBF_curve)
main_model_logBF_curve <- main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]))
main_model_logBF_curve <-  main_model_logBF_curve %>%
mutate(log10BF = log10(exp(BF.log_BF)))
log10BF_loess <- loess(log10BF ~ effect,
data = main_model_logBF_curve)
main_model_logBF_curve <- main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
))
main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
)) %>%
group_by(Jeffreys_scale, sign) %>%
select(effect, log10BF_pred) %>%
summarise()
main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
)) %>%
group_by(Jeffreys_scale, sign) %>%
select(Jeffreys_scale, sign, effect) %>%
summarise(min_effect = min(effect),
max_effect = max(effect))
main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
)) %>%
group_by(Jeffreys_scale, sign) %>%
select(Jeffreys_scale, sign, effect) %>%
summarise(min_effect = min(effect),
max_effect = max(effect)) %>%
slice_head()
main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
)) %>%
slice_head() %>%
group_by(Jeffreys_scale, sign) %>%
select(Jeffreys_scale, sign, effect) %>%
summarise(min_effect = min(effect),
max_effect = max(effect))
main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
)) %>%
slice_head()
main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
)) %>%
slice(2:100) %>%
group_by(Jeffreys_scale, sign) %>%
select(Jeffreys_scale, sign, effect) %>%
summarise(min_effect = min(effect),
max_effect = max(effect))
main_model_logBF_curve <-  main_model_logBF_curve %>%
mutate(log10BF = log10(exp(BF.log_BF)))
log10BF_loess <- loess(log10BF ~ effect,
data = main_model_logBF_curve)
Jeffreys_scales <- main_model_logBF_curve %>%
mutate(log10BF_pred = predict(log10BF_loess)) %>%
mutate(Jeffreys_scale = case_when(
log10BF_pred <= 0.5 ~ "Weak",
log10BF_pred <= 1 ~ "Substantial",
log10BF_pred <= 1.5 ~ "Strong",
log10BF_pred <= 2.0 ~ "Very Strong",
log10BF_pred > 2.0  ~ "Decisive"
)) %>%
mutate(log10BF_diff = log10BF_pred - lag(log10BF_pred, default = log10BF_pred[1]),
sign = case_when(
log10BF_diff < 0 ~ "Negative",
log10BF_diff >= 0 ~ "Positive"
)) %>%
slice(2:100) %>%
group_by(Jeffreys_scale, sign) %>%
select(Jeffreys_scale, sign, effect) %>%
summarise(min_effect = min(effect),
max_effect = max(effect))
Jeffreys_scales$max_effect[,1]
Jeffreys_scales$max_effect[,1]
Jeffreys_scales$max_effect[1]
Jeffreys_scales$max_effect[1]
Jeffreys_scales
targets::tar_load(list(motor_demands_model_plot, participant_group_model_plot, selftalk_content_model_plot,
matching_model_plot, task_novelty_model_plot, cue_selection_model_plot,
overtness_selection_model_plot, training_model_plot, study_design_model_plot))
targets::tar_load(study_design_model_plot)
targets::tar_load(selftalk_content_model)
selftalk_content_model
targets::tar_visnetwork()
targets::tar_make()
targets::tar_load(tidy_selftalk_content_model)
tidy_selftalk_content_model
tidy_selftalk_content_model$estimate
round(tidy_selftalk_content_model$estimate[2],2)
round(tidy_selftalk_content_model$conf.low[2],2)
targets::tar_load(tidy_selftalk_content_model)
targets::tar_load(tidy_matching_model)
tidy_matching_model
targets::tar_load(tidy_selftalk_content_model)
targets::tar_load(tidy_matching_model)
targets::tar_load(tidy_task_novelty_model)
tidy_task_novelty_model
targets::tar_load(tidy_motor_demands_model)
targets::tar_load(tidy_selftalk_content_model)
targets::tar_load(tidy_matching_model)
targets::tar_load(tidy_task_novelty_model)
tidy_motor_demands_model
targets::tar_load(tidy_motor_demands_model)
targets::tar_load(tidy_selftalk_content_model)
targets::tar_load(tidy_matching_model)
targets::tar_load(tidy_task_novelty_model)
targets::tar_load(tidy_training_model)
tidy_training_model
targets::tar_load(data_effect_sizes)
targets::tar_load(data)
View(data)
data %>%
select(group, st_n, con_n) %>%
group_by(group)
library(tidyverse)
data %>%
select(group, st_n, con_n) %>%
group_by(group) %>%
summarise(st_n = max(st_n),
con_n = max(con_n))
data %>%
select(group, n_st, n_con) %>%
group_by(group) %>%
summarise(n_st = max(n_st),
n_con = max(n_con)) %>%
summarise(`All` = sum(n_st),
`Minumum RT` = min(n_st),
`Median RT` = median(n_st),
`Maximum RT` = max(n_st),
`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:8, names_to = "Group", values_to = "Sample Size")
44742/12
44742/13
targets::tar_visnetwork()
targets::tar_load(data)
sample_sizes <- data %>%
select(group, n_st, n_con) %>%
group_by(group) %>%
summarise(n_st = max(n_st),
n_con = max(n_con)) %>%
summarise(`All` = sum(n_st),
`Minumum RT` = min(n_st),
`Median RT` = median(n_st),
`Maximum RT` = max(n_st),
`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:8, names_to = "Group", values_to = "Sample Size")
knitr::kable(
sample_sizes
) %>%
pack_rows("Self-talk", 1, 4) %>%
pack_rows("Control", 5, 8) %>%
footnote(general = c("ST = self-talk", "CON = non-intervention control")
) %>%
row_spec(0, bold = TRUE) %>%
kable_classic(full_width = FALSE)
renv::install(kableExtra)
renv::install("kableExtra")
library(kableExtra)
targets::tar_load(data)
sample_sizes <- data %>%
select(group, n_st, n_con) %>%
group_by(group) %>%
summarise(n_st = max(n_st),
n_con = max(n_con)) %>%
summarise(`All` = sum(n_st),
`Minumum RT` = min(n_st),
`Median RT` = median(n_st),
`Maximum RT` = max(n_st),
`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:8, names_to = "Group", values_to = "Sample Size")
knitr::kable(
sample_sizes
) %>%
pack_rows("Self-talk", 1, 4) %>%
pack_rows("Control", 5, 8) %>%
footnote(general = c("ST = self-talk", "CON = non-intervention control")
) %>%
row_spec(0, bold = TRUE) %>%
kable_classic(full_width = FALSE)
sample_sizes <- data %>%
unite(c(study, experiment, group), "group")
?unite
sample_sizes <- data %>%
unite("group",c(study, experiment, group))
View(sample_sizes)
sample_sizes <- data %>%
unite("group",c(study, experiment, group)) %>%
select(group, n_st, n_con) %>%
group_by(group) %>%
summarise(n_st = max(n_st),
n_con = max(n_con)) %>%
summarise(`All` = sum(n_st),
`Minumum RT` = min(n_st),
`Median RT` = median(n_st),
`Maximum RT` = max(n_st),
`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:8, names_to = "Group", values_to = "Sample Size")
knitr::kable(
sample_sizes
) %>%
pack_rows("Self-talk", 1, 4) %>%
pack_rows("Control", 5, 8) %>%
footnote(general = c("ST = self-talk", "CON = non-intervention control")
) %>%
row_spec(0, bold = TRUE) %>%
kable_classic(full_width = FALSE)
sample_sizes_con <- data %>%
select(study, n_con) %>%
group_by(group) %>%
summarise(n_st = max(n_con)) %>%
summarise(`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:8, names_to = "Group", values_to = "Sample Size")
sample_sizes_con <- data %>%
select(study, n_con) %>%
group_by(study) %>%
summarise(n_st = max(n_con)) %>%
summarise(`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:8, names_to = "Group", values_to = "Sample Size")
sample_sizes_con <- data %>%
select(study, n_con) %>%
group_by(study) %>%
summarise(n_con = max(n_con)) %>%
summarise(`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:8, names_to = "Group", values_to = "Sample Size")
sample_sizes_con <- data %>%
select(study, n_con) %>%
group_by(study) %>%
summarise(n_con = max(n_con)) %>%
summarise(`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:4, names_to = "Group", values_to = "Sample Size")
sample_sizes_con
View(sample_sizes_con)
sample_sizes_st <- data %>%
select(group, n_st) %>%
group_by(group) %>%
summarise(n_st = max(n_st)) %>%
summarise(`All ST` = sum(n_st),
`Minumum ST` = min(n_st),
`Median ST` = median(n_st),
`Maximum ST` = max(n_st),
`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:4, names_to = "Group", values_to = "Sample Size")
sample_sizes_st <- data %>%
select(group, n_st) %>%
group_by(group) %>%
summarise(n_st = max(n_st)) %>%
summarise(`All ST` = sum(n_st),
`Minumum ST` = min(n_st),
`Median ST` = median(n_st),
`Maximum ST` = max(n_st)
) %>%
pivot_longer(1:4, names_to = "Group", values_to = "Sample Size")
View(sample_sizes_st)
sample_sizes_st <- data %>%
select(group, n_st) %>%
group_by(group) %>%
summarise(n_st = max(n_st)) %>%
summarise(`All ST` = sum(n_st),
`Minumum ST` = min(n_st),
`Median ST` = median(n_st),
`Maximum ST` = max(n_st)
) %>%
pivot_longer(1:4, names_to = "Group", values_to = "Sample Size")
sample_sizes_con <- data %>%
select(study, n_con) %>%
group_by(study) %>%
summarise(n_con = max(n_con)) %>%
summarise(`All CON` = sum(n_con, na.rm =TRUE),
`Minumum CON` = min(n_con, na.rm =TRUE),
`Median CON` = median(n_con, na.rm =TRUE),
`Maximum CON` = max(n_con, na.rm =TRUE)) %>%
pivot_longer(1:4, names_to = "Group", values_to = "Sample Size")
sample_sizes <- bind_rows(sample_sizes_st, sample_sizes_con)
knitr::kable(
sample_sizes
) %>%
pack_rows("Self-talk", 1, 4) %>%
pack_rows("Control", 5, 8) %>%
footnote(general = c("ST = self-talk", "CON = non-intervention control")
) %>%
row_spec(0, bold = TRUE) %>%
kable_classic(full_width = FALSE)
sample_sizes
sample_sizes[2,1]
sample_sizes[1,2]
sample_sizes[1,2] + sample_sizes[5,2]
sample_sizes$`Sample Size`
lochbaum <- c(0.57,1.35,0.65,0.32,0.24,0.51,0.51,0.48,0.72,1,0.22,0.49,0.48,0.47,0.68,0.28,0.2,0.44,0.32,0.34,0.84,0.38,0.38,0.38,0.74,0.72,0.82,0.72,0.15,0.47,0.31,0.49,0.49,0.65)
mean(lochbaum)
min(lochbaum)
lochbaum <- c(0.57,1.35,0.65,0.32,0.24,0.51,0.51,0.48,0.72,1,0.22,0.49,0.48,0.47,0.68,0.28,0.2,0.44,0.32,0.34,0.84,0.38,0.38,0.38,0.74,0.72,0.82,0.72,0.15,0.47,0.31,0.49,0.49,0.65)
targets::tar_load(main_model)
nd <- data.frame(study = "new", vi = 0)
pred_int_data <- posterior_predict(
object = model,
newdata = nd,
re_formula = NULL,
allow_new_levels = TRUE,
sample_new_levels = "gaussian"
)
pred_int_data <- brms::posterior_predict(
object = model,
newdata = nd,
re_formula = NULL,
allow_new_levels = TRUE,
sample_new_levels = "gaussian"
)
pred_int_data <- brms::posterior_predict(
object = main_model,
newdata = nd,
re_formula = NULL,
allow_new_levels = TRUE,
sample_new_levels = "gaussian"
)
pred_int_data <- tidybayes::median_qi(pred_int_data) %>%
mutate(label = as.character("Posterior Pooled Estimate"))
pred_int_data
round(pred_int_data$ymin,2)
renv::install("trackdown")
trackdown::upload_file("pre_print_manuscript.qmd", code = FALSE)
trackdown::upload_file("pre_print_manuscript.qmd", hide_code = FALSE)
trackdown::upload_file("pre_print_manuscript", hide_code = FALSE)
packageVersion("trackdown"
packageVersion("trackdown")
remotes::install_github("claudiozandonella/trackdown",
build_vignettes = TRUE)
remotes::install_github("claudiozandonella/trackdown",
build_vignettes = TRUE)
remotes::install_github("claudiozandonella/trackdown",
build_vignettes = TRUE)
renv::install("claudiozandonella/trackdown")
package_version("trackdown")
packageVersion("trackdown")
trackdown::upload_file("pre_print_manuscript.qmd", hide_code = TRUE)
trackdown_auth_configure(path = "C:/Users/james/Dropbox/Research Toolbox/R stuff/trackdown")
trackdown::trackdown_auth_configure(path = "C:/Users/james/Dropbox/Research Toolbox/R stuff/trackdown")
usethis::edit_r_environ("C:/Users/james/Dropbox/Research Toolbox/R stuff/trackdown")
renv::install("usethis")
usethis::edit_r_environ("C:/Users/james/Dropbox/Research Toolbox/R stuff/trackdown")
trackdown::trackdown_auth_configure(path = "C:/Users/james/Dropbox/Research Toolbox/R stuff/trackdown")
my_client <- gargle::gargle_oauth_client(
name = "my-client-name",
id = "1014438107089-1255if21kl3i1hrlu9e8k09qfkc1136v.apps.googleusercontent.com",
secret = "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"
)
trackdown_auth_configure(client = my_client)
trackdown::trackdown_auth_configure(client = my_client)
trackdown::upload_file("pre_print_manuscript/qmd", hide_code = TRUE)
trackdown::upload_file("pre_print_manuscript.qmd", hide_code = TRUE)
trackdown::upload_file("pre_print_manuscript.qmd", hide_code = TRUE)
trackdown::update_file("pre_print_manuscript.qmd", hide_code = TRUE)
trackdown::update_file("pre_print_manuscript.qmd", hide_code = TRUE)
trackdown::update_file("pre_print_manuscript.qmd", hide_code = TRUE)
