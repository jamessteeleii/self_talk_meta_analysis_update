label = glue::glue("{b_Intercept} [{.lower}, {.upper}]"),
x = 4
),
hjust = "inward",
size = 3
) +
labs(
x = element_blank(),
# summary measure
y = element_blank(),
title = "Study level estimates",
subtitle = "Posterior distributions, mean and 95% quantile intervals, individual effects (ticks), and 95% prediction interval (grey band)"
) +
scale_x_continuous(limits = c(-2, 4),
breaks = c(-2,-1, 0, 1, 2, 3, 4)) +
theme_classic() +
theme(panel.border = element_rect(fill = NA),
plot.subtitle = element_text(size = 6))
)
forest_study
targets::tar_visnetwork()
targets::tar_make()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_dispatched()
targets::tar_prune_list()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_make()
targets::tar_make()
targets::tar_prune_list()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_load(prior_robma_model)
prior_robma_model
RoBMA::interpret(prior_robma_model)
targets::tar_load(null_robma_model)
RoBMA::interpret(null_robma_model)
targets::tar_make()
gc()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_dispatched()
targets::tar_make()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_make()
targets::tar_prune()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_dispatched()
targets::tar_make()
targets::tar_make()
future::nbrOfWorkers()
targets::tar_make()
targets::tar_make()
targets::tar_dispatched()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_dispatched()
targets::tar_prune()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_dispatched()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
install.packages("qs")
targets::tar_make(garbage_collection = TRUE)
future::plan(future::multisession)
f <- future::future(
expr = {
library(targets)
tar_load_globals()
plot_main_model_forest(data_effect_sizes, main_model)
},
seed = TRUE
)
future::value(f)
tar_load_globals()
targets::tar_load_globals()
f <- future::future(
expr = {
library(targets)
tar_load_globals()
tar_load_everything()
plot_main_model_forest(data_effect_sizes, main_model)
},
seed = TRUE
)
future::value(f)
targets::tar_workspaces()
renv::status()
?renv::status
renv::install()
renv::status()
renv::status()
renv::install()
renv::status()
renv::snapshot()
renv::status()
renv::install()
devtools::install_github("daniel1noble/orchaRd", ref = "main", force = TRUE)
install.packages("devtools")
renv::status()
renv::snapshot()
targets::use_targets()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_make()
renv::install("crew")
renv::install("targets")
renv::snapshot()
targets::tar_make()
targets::tar_make()
renv::status()
renv::snapshot()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_visnetwork()
targets::tar_make(garbage_collection = TRUE)
targets::tar_meta(fields = warnings, complete_only = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_prune()
targets::tar_make()
targets::tar_make()
targets::tar_prune_list()
targets::tar_make()
targets::tar_invalidate(moderators_panel_plot)
targets::tar_visnetwork()
targets::tar_invalidate(moderators_panel_plot)
targets::tar_make(garbage_collection = TRUE)
targets::tar_invalidate(moderators_panel_plot)
targets::tar_delete(moderators_panel_plot)
targets::tar_visnetwork()
targets::tar_progress()
targets::tar_dispatched()
targets::tar_invalidate(moderators_panel_plot)
targets::tar_delete(moderators_panel_plot)
targets::tar_visnetwork()
targets::tar_dispatched()
?targets::tar_dispatched
targets::tar_prune()
targets::tar_dispatched()
targets::tar_canceled()
targets::tar_cancel(moderators_panel_plot)
targets::tar_dispatched()
targets::tar_make()
targets::tar_invalidate(moderators_panel_plot)
targets::tar_delete(moderators_panel_plot)
targets::tar_prune()
targets::tar_make()
targets::tar_visnetwork()
targets::tar_make(garbage_collection = TRUE)
targets::tar_visnetwork()
targets::tar_dispatched()
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_load(prior_robma_model)
RoBMA::interpret(prior_robma_model)
targets::tar_make(garbage_collection = TRUE)
plan(sequential)
sim <- function(participant_n = as.double(),
b0 = as.double(), b_time = as.double(), b_cond = as.double(), b_cond_time = as.double(),         # fixed effects
u_participant = as.double(), # random intercepts
sigma = as.double(),       # measurement error
... # helps the function work with pmap() below
) {
# Taken fromm Hatsigeorgiadis et al. (2011) overall estimate
main_model_prior <-
c(
brms::prior("student_t(60, 0.48, 0.05)", class = "Intercept")
)
# set up data structure
dat <- add_random(participant = 100) |>
add_between("participant", cond = c("control", "self_talk")) |>
add_recode("cond", "cond_dummy", control = 0, self_talk = 1) |>
add_within("participant", time = seq(0,1)) |>
add_ranef("participant", u_participant = 1) |>
add_ranef(sigma = 0.5) |>
mutate(dv = (0 + u_participant) + (1 * time) + (0 * cond_dummy) + (0.5 * cond_dummy * time) + sigma)
ri_self_talk <- cor(filter(dat, cond == "self_talk" & time == 0)$dv,
filter(dat, cond == "self_talk" & time == 1)$dv)
ri_control <- cor(filter(dat, cond == "control" & time == 0)$dv,
filter(dat, cond == "control" & time == 1)$dv)
summary_dat <- dat |>
group_by(time, cond) |>
add_count() |>
summarise(n = first(n),
mean = mean(dv),
sd = sd(dv)) |>
pivot_wider(names_from = c(time,cond),
values_from = c(mean, sd, n)) |>
mutate(pre_sd_pool = sqrt(((n_0_self_talk - 1) * sd_0_self_talk  ^ 2 +
(n_0_control - 1) * sd_0_control ^ 2
) /
(n_0_self_talk + n_0_control - 2)),
ri_self_talk = ri_self_talk,
ri_control = ri_control
)
ppc_dat_st <- escalc(
measure = "SMCR",
m1i = mean_1_self_talk,
m2i = mean_0_self_talk,
sd1i = pre_sd_pool,
ni = n_0_self_talk,
ri = ri_self_talk,
data = summary_dat
)
ppc_dat_con <- escalc(
measure = "SMCR",
m1i = mean_1_control,
m2i = mean_0_control,
sd1i = pre_sd_pool,
ni = n_0_control,
ri = ri_control,
data = summary_dat
)
summary_dat$yi <-
(ppc_dat_st$yi - ppc_dat_con$yi)
summary_dat$vi <-
(ppc_dat_st$vi + ppc_dat_con$vi)
summary_dat$study_code <- 1
main_model <-
brm(
yi | se(sqrt(vi)) ~ 1 + (1 | study_code),
data = summary_dat,
prior = main_model_prior,
chains = 4,
cores = 4,
seed = 1988,
warmup = 4000,
iter = 6000,
control = list(adapt_delta = 0.99)
)
percentage_in_rope <- rope(main_model, ci = 1, range = c(0.38, 0.58))
remove(main_model)
gc()
return(percentage_in_rope)
}
plan(multisession, workers = 2)
future::plan(multisession, workers = 2)
future::plan("multisession", workers = 2)
sims <- crossing(
rep = 1:10, # number of replicates
participant_n = c(10,20), # range of participant N
b_cond_time = seq(0,1, by = 0.5) # estimand of interest
) |>
mutate(
b0 = 0, b_time = 1, b_cond = 0,         # fixed effects
u_participant = 0.5,   # random intercept participant
sigma = 0.5         # measurement error
) |>
mutate(analysis = future_pmap(., sim)) %>% # not sure why base pipe doesn't work here
unnest(analysis)
library(tidyverse)
library(
"here",
"metafor",
"brms",
"modelr",
"tidybayes",
"bayesplot",
"bayestestR",
"rstan",
"ggridges",
"janitor",
"tidyverse",
"base",
"furrr",
"patchwork",
"marginaleffects",
"broom.mixed",
# "RoBMA",
"future",
"faux"
)
library(
here,
metafor,
brms,
modelr,
tidybayes,
bayesplot,
bayestestR,
rstan,
ggridges,
janitor,
tidyverse,
base,
furrr,
patchwork,
marginaleffects,
broom.mixed,
# RoBMA,
future,
faux
)
library(
here,
metafor,
brms,
modelr,
tidybayes,
bayesplot,
bayestestR,
rstan,
ggridges,
janitor,
tidyverse,
base,
furrr,
patchwork,
marginaleffects,
broom.mixed,
# RoBMA,
future,
faux
)
library(
brms,
modelr,
tidybayes,
bayesplot,
bayestestR,
rstan,
ggridges,
janitor,
tidyverse,
base,
furrr,
patchwork,
marginaleffects,
broom.mixed,
# RoBMA,
future,
faux
)
library(
brms,
modelr,
tidybayes,
bayesplot,
bayestestR,
rstan,
ggridges,
janitor,
tidyverse,
base,
furrr,
patchwork,
marginaleffects,
broom.mixed,
future,
faux
)
library(
brms,
# modelr,
# tidybayes,
# bayesplot,
# bayestestR,
# tidyverse,
# furrr,
# future,
# faux
)
library(
# brms,
modelr,
# tidybayes,
# bayesplot,
# bayestestR,
# tidyverse,
# furrr,
# future,
# faux
)
library(
# brms,
# modelr,
tidybayes,
# bayesplot,
# bayestestR,
# tidyverse,
# furrr,
# future,
# faux
)
library(
# brms,
# modelr,
# tidybayes,
bayesplot,
# bayestestR,
# tidyverse,
# furrr,
# future,
# faux
)
library(
# brms,
# modelr,
# tidybayes,
# bayesplot,
bayestestR,
# tidyverse,
# furrr,
# future,
# faux
)
library(
# brms,
# modelr,
# tidybayes,
# bayesplot,
# bayestestR,
# tidyverse,
furrr,
# future,
# faux
)
library(
# brms,
# modelr,
# tidybayes,
# bayesplot,
# bayestestR,
# tidyverse,
# furrr,
# future,
faux
)
sims <- crossing(
rep = 1:10, # number of replicates
participant_n = c(10,20), # range of participant N
b_cond_time = seq(0,1, by = 0.5) # estimand of interest
) |>
mutate(
b0 = 0, b_time = 1, b_cond = 0,         # fixed effects
u_participant = 0.5,   # random intercept participant
sigma = 0.5         # measurement error
) |>
mutate(analysis = future_pmap(., sim)) %>% # not sure why base pipe doesn't work here
unnest(analysis)
sims <- crossing(
rep = 1:10, # number of replicates
participant_n = c(10,20), # range of participant N
b_cond_time = seq(0,1, by = 0.5) # estimand of interest
) |>
mutate(
b0 = 0, b_time = 1, b_cond = 0,         # fixed effects
u_participant = 0.5,   # random intercept participant
sigma = 0.5         # measurement error
) %>%
mutate(analysis = future_pmap(., sim)) %>% # not sure why base pipe doesn't work here
unnest(analysis)
plan(sequential)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_visnetwork()
