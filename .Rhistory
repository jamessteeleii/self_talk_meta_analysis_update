targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_prune()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_dispatched()
targets::tar_visnetwork()
?tarchetypes::tar_map_rep()
targets::tar_dispatched()
targets::tar_make()
?brms::brm
targets::tar_make()
targets::tar_make()
targets::tar_read(main_model)
targets::tar_load(main_model)
plan(sequential)
targets::tar_make()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_prune()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_dispatched()
targets::tar_prune()
{style
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_meta(fields = warnings, complete_only = TRUE)
targets::tar_load(main_model_contour_plot)
targets::tar_load(main_model_contour_funnel_plot)
main_model_contour_funnel_plot
targets::tar_load(data_effect_sizes)
rma.mv(yi, vi,
random = ~ 1 | study_code / experiment_code / group_code / effect_code,
data = data_effect_sizes,
method = "REML",
test = "t")
metafor::rma.mv(yi, vi,
random = ~ 1 | study_code / experiment_code / group_code / effect_code,
data = data_effect_sizes,
method = "REML",
test = "t")
targets::tar_make()
targets::tar_make()
targets::tar_load(main_model_contour_funnel_plot )
main_model_contour_funnel_plot
# Plots
plot_main_model_forest <- function(data, model) {
# Sample draws from the individual studies
study_draws <- model %>%
spread_draws(b_Intercept, r_study_code[study_code, ]) %>%
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) %>%
select(.chain, .iteration, .draw, b_Intercept, study_code) %>%
merge(data[, c(1,3)], by = "study_code")
study_summary <- group_by(study_draws, label) %>%
mean_qi(b_Intercept) %>%
mutate(b_Intercept = b_Intercept,
.lower = .lower,
.upper = .upper)
# Prediction interval
nd <- data.frame(study = "new", vi = 0)
pred_int_data <- posterior_predict(
object = model,
newdata = nd,
re_formula = NULL,
allow_new_levels = TRUE,
sample_new_levels = "gaussian"
)
pred_int_data <- median_qi(pred_int_data) %>%
mutate(label = as.character("Posterior Pooled Estimate"))
# Forest plot of study level estimates
forest_study <- ggplot(aes(x = b_Intercept,
y = reorder(label, b_Intercept)),
data = study_draws) +
# Add band for prediction interval
annotate(
"rect",
xmin = pred_int_data$ymin,
xmax = pred_int_data$ymax,
ymin = -Inf,
ymax = Inf,
alpha = .1,
fill = "black"
) +
# Add ref line at zero
geom_vline(xintercept = 0, linetype = 2) +
scale_y_discrete() +
# Add densities and point intervals
geom_density_ridges(
fill = "darkgrey",
rel_min_height = 0.01,
col = NA,
scale = 1,
alpha = 0.8
) +
stat_pointinterval(point_interval = mean_qi,
.width = .95,
size = 0.75) +
# Add individual study data
geom_point(
data = subset(data, !is.na(yi)),
aes(x = yi, y = label),
position = position_nudge(y = -0.1),
shape = "|"
) +
# Add text and labels
geom_text(
data = mutate_if(study_summary,
is.numeric, round, 2),
aes(
label = glue::glue("{b_Intercept} [{.lower}, {.upper}]"),
x = 4
),
hjust = "inward",
size = 3
) +
labs(
x = element_blank(),
# summary measure
y = element_blank(),
title = "Study level estimates",
subtitle = "Posterior distributions, mean and 95% quantile intervals, individual effects (ticks), and 95% prediction interval (grey band)"
) +
scale_x_continuous(limits = c(-2, 4),
breaks = c(-2,-1, 0, 1, 2, 3, 4)) +
theme_classic() +
theme(panel.border = element_rect(fill = NA),
plot.subtitle = element_text(size = 6))
}
plot_main_model_forest(data_effect_sizes, main_model)
main_model
targets::tar_load(main_model)
main_model
plot_main_model_forest(data_effect_sizes, main_model)
targets::tar_visnetwork()
# Plots
plot_main_model_forest <- function(data, model) {
# Sample draws from the individual studies
study_draws <- model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data[, c(1,3)], by = "study_code")
study_summary <- group_by(study_draws, label) |>
mean_qi(b_Intercept) |>
mutate(b_Intercept = b_Intercept,
.lower = .lower,
.upper = .upper)
# Prediction interval
nd <- data.frame(study = "new", vi = 0)
pred_int_data <- posterior_predict(
object = model,
newdata = nd,
re_formula = NULL,
allow_new_levels = TRUE,
sample_new_levels = "gaussian"
)
pred_int_data <- median_qi(pred_int_data) |>
mutate(label = as.character("Posterior Pooled Estimate"))
# Forest plot of study level estimates
forest_study <- ggplot(aes(x = b_Intercept,
y = reorder(label, b_Intercept)),
data = study_draws) +
# Add band for prediction interval
annotate(
"rect",
xmin = pred_int_data$ymin,
xmax = pred_int_data$ymax,
ymin = -Inf,
ymax = Inf,
alpha = .1,
fill = "black"
) +
# Add ref line at zero
geom_vline(xintercept = 0, linetype = 2) +
scale_y_discrete() +
# Add densities and point intervals
geom_density_ridges(
fill = "darkgrey",
rel_min_height = 0.01,
col = NA,
scale = 1,
alpha = 0.8
) +
stat_pointinterval(point_interval = mean_qi,
.width = .95,
size = 0.75) +
# Add individual study data
geom_point(
data = subset(data, !is.na(yi)),
aes(x = yi, y = label),
position = position_nudge(y = -0.1),
shape = "|"
) +
# Add text and labels
geom_text(
data = mutate_if(study_summary,
is.numeric, round, 2),
aes(
label = glue::glue("{b_Intercept} [{.lower}, {.upper}]"),
x = 4
),
hjust = "inward",
size = 3
) +
labs(
x = element_blank(),
# summary measure
y = element_blank(),
title = "Study level estimates",
subtitle = "Posterior distributions, mean and 95% quantile intervals, individual effects (ticks), and 95% prediction interval (grey band)"
) +
scale_x_continuous(limits = c(-2, 4),
breaks = c(-2,-1, 0, 1, 2, 3, 4)) +
theme_classic() +
theme(panel.border = element_rect(fill = NA),
plot.subtitle = element_text(size = 6))
}
plot_main_model_forest(data_effect_sizes, main_model)
library(tidyverse)
plot_main_model_forest(data_effect_sizes, main_model)
library(tidybayes)
plot_main_model_forest(data_effect_sizes, main_model)
system.time(plot_main_model_forest(data_effect_sizes, main_model))
library(brms)
View(plot_main_model_forest)
View(plot_main_model_forest)
library(ggridges)
plot_main_model_forest(data_effect_sizes, main_model)
system.time(plot_main_model_forest(data_effect_sizes, main_model))
# Sample draws from the individual studies
study_draws <- main_model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data[, c(1,3)], by = "study_code")
# Sample draws from the individual studies
study_draws <- main_model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data_effect_sizes[, c(1,3)], by = "study_code")
system.time(
# Sample draws from the individual studies
study_draws <- main_model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data_effect_sizes[, c(1,3)], by = "study_code")
study_summary <- group_by(study_draws, label) |>
system.time(
# Sample draws from the individual studies
study_draws <- main_model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data_effect_sizes[, c(1,3)], by = "study_code")
study_summary <- group_by(study_draws, label) |>
system.time(
# Sample draws from the individual studies
study_draws <- main_model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data_effect_sizes[, c(1,3)], by = "study_code")
study_summary <- group_by(study_draws, label) |>
system.time(
# Sample draws from the individual studies
study_draws <- main_model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data_effect_sizes[, c(1,3)], by = "study_code")
study_summary <- group_by(study_draws, label) |>
system.time(
# Sample draws from the individual studies
study_draws <- main_model |>
spread_draws(b_Intercept, r_study_code[study_code, ]) |>
mutate(b_Intercept = b_Intercept + r_study_code,
study_code = as.factor(study_code)) |>
select(.chain, .iteration, .draw, b_Intercept, study_code) |>
merge(data_effect_sizes[, c(1,3)], by = "study_code")
)
system.time(
study_summary <- group_by(study_draws, label) |>
mean_qi(b_Intercept) |>
mutate(b_Intercept = b_Intercept,
.lower = .lower,
.upper = .upper)
# Prediction interval
nd <- data.frame(study = "new", vi = 0)
study_summary <- group_by(study_draws, label) |>
mean_qi(b_Intercept) |>
mutate(b_Intercept = b_Intercept,
.lower = .lower,
.upper = .upper)
nd <- data.frame(study = "new", vi = 0)
pred_int_data <- posterior_predict(
object = main_model,
newdata = nd,
re_formula = NULL,
allow_new_levels = TRUE,
sample_new_levels = "gaussian"
)
pred_int_data <- median_qi(pred_int_data) |>
mutate(label = as.character("Posterior Pooled Estimate"))
pred_int_data <- median_qi(pred_int_data) |>
mutate(label = as.character("Posterior Pooled Estimate"))
pred_int_data
system.time(
# Forest plot of study level estimates
forest_study <- ggplot(aes(x = b_Intercept,
y = reorder(label, b_Intercept)),
data = study_draws) +
# Add band for prediction interval
annotate(
"rect",
xmin = pred_int_data$ymin,
xmax = pred_int_data$ymax,
ymin = -Inf,
ymax = Inf,
alpha = .1,
fill = "black"
) +
# Add ref line at zero
geom_vline(xintercept = 0, linetype = 2) +
scale_y_discrete() +
# Add densities and point intervals
geom_density_ridges(
fill = "darkgrey",
rel_min_height = 0.01,
col = NA,
scale = 1,
alpha = 0.8
) +
stat_pointinterval(point_interval = mean_qi,
.width = .95,
size = 0.75) +
# Add individual study data
geom_point(
data = subset(data_effect_sizes, !is.na(yi)),
aes(x = yi, y = label),
position = position_nudge(y = -0.1),
shape = "|"
) +
# Add text and labels
geom_text(
data = mutate_if(study_summary,
is.numeric, round, 2),
aes(
label = glue::glue("{b_Intercept} [{.lower}, {.upper}]"),
x = 4
),
hjust = "inward",
size = 3
) +
labs(
x = element_blank(),
# summary measure
y = element_blank(),
title = "Study level estimates",
subtitle = "Posterior distributions, mean and 95% quantile intervals, individual effects (ticks), and 95% prediction interval (grey band)"
) +
scale_x_continuous(limits = c(-2, 4),
breaks = c(-2,-1, 0, 1, 2, 3, 4)) +
theme_classic() +
theme(panel.border = element_rect(fill = NA),
plot.subtitle = element_text(size = 6))
)
forest_study
targets::tar_visnetwork()
targets::tar_make()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_dispatched()
targets::tar_prune_list()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_make()
targets::tar_make()
targets::tar_prune_list()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_load(prior_robma_model)
prior_robma_model
RoBMA::interpret(prior_robma_model)
targets::tar_load(null_robma_model)
RoBMA::interpret(null_robma_model)
targets::tar_make()
gc()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_dispatched()
targets::tar_make()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_make()
targets::tar_prune()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_prune()
targets::tar_dispatched()
targets::tar_make()
targets::tar_make()
future::nbrOfWorkers()
targets::tar_make()
targets::tar_make()
targets::tar_dispatched()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_dispatched()
targets::tar_prune()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_dispatched()
targets::tar_dispatched()
targets::tar_visnetwork()
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
install.packages("qs")
targets::tar_make(garbage_collection = TRUE)
future::plan(future::multisession)
f <- future::future(
expr = {
library(targets)
tar_load_globals()
plot_main_model_forest(data_effect_sizes, main_model)
},
seed = TRUE
)
future::value(f)
tar_load_globals()
targets::tar_load_globals()
f <- future::future(
expr = {
library(targets)
tar_load_globals()
tar_load_everything()
plot_main_model_forest(data_effect_sizes, main_model)
},
seed = TRUE
)
future::value(f)
targets::tar_workspaces()
renv::status()
?renv::status
renv::install()
renv::status()
renv::status()
renv::install()
renv::status()
renv::snapshot()
renv::status()
renv::install()
devtools::install_github("daniel1noble/orchaRd", ref = "main", force = TRUE)
install.packages("devtools")
renv::status()
renv::snapshot()
targets::use_targets()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
targets::tar_make()
renv::install("crew")
renv::install("targets")
renv::snapshot()
targets::tar_make()
targets::tar_make()
renv::status()
renv::snapshot()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_make(garbage_collection = TRUE)
targets::tar_visnetwork()
